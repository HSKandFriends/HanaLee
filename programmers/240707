//연속된 수의 합 //틀림, 70점
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> solution(int num, int total) {
    vector<int> answer;
    int mid=total/num;
    int i=0;
    
    
    if (num%2==1){
        answer.insert(answer.begin(),mid);
        for(i=1;i<num/2+1;i++){  
            answer.insert(answer.begin()+(i*2-1),mid-i);
            answer.insert(answer.begin()+(i*2),mid+i);
            }
    }
    else if (mid==0){
        for(i=0;i<num/2;i++)
        {
            answer.insert(answer.begin()+(i*2),mid-i);
            answer.insert(answer.begin()+(i*2+1),mid+i+1);
            }
    }
    else if(num%2==0){
        for(i=0;i<mid/2+1;i++)
        {
            answer.insert(answer.begin()+(i*2),mid+i+1);
            answer.insert(answer.begin()+(i*2+1),mid-i);
            }
    }
    sort(answer.begin(),answer.end());
    
    
    return answer;
}

//v.at(idx); // v[][]도 가능
//- idx번째 원소를 참조합니다.
//평행
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int solution(vector<vector<int>> dots) {
    int answer = 0;
    int i=0;
    float data1=0, data2=0;
    float lean1=0, lean2=0;
    
    //dots[num][x,y] x=0 / y=1
    data1=dots[0][0]-dots[1][0];
    data2=dots[0][1]-dots[1][1];
    lean1= (data1)/(data2);
    data1=(dots[2][0]-dots[3][0]);
    data2=dots[2][1]-dots[3][1];
    lean2= (data1)/(data2);
    if(lean1==lean2){answer=1;}
    
    data1=dots[0][0]-dots[2][0];
    data2=dots[0][1]-dots[2][1];
    lean1= (data1)/(data2);
    data1=(dots[1][0]-dots[3][0]);
    data2=dots[1][1]-dots[3][1];
    lean2= (data1)/(data2);
    if(lean1==lean2){answer=1;}

    
    return answer;
}
